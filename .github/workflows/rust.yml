name: Test App

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - uses: actions/checkout@v4

    # Step 2: Install system dependencies based on Tauri documentation
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          sqlite3 \
          libsqlite3-dev  # Install SQLite and its development libraries

    # Step 3: Install Rust
    - name: Install Rust
      run: curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y
      shell: bash

    # Add Rust to the PATH
    - name: Add Rust to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    # Step 4: Create .env file in root directory
    - name: Create .env file
      run: echo "DATABASE_URL=./app.db" > .env
      working-directory: ./  # Place the .env file in the root directory

    # Step 5: Install Diesel CLI
    - name: Install Diesel CLI
      run: cargo install diesel_cli --no-default-features --features sqlite

    # Step 6: Run Diesel setup and migrations in the root directory
    - name: Diesel setup and migrations
      run: |
        diesel setup  # Set up the database
        diesel migration run  # Run migrations to create tables
      working-directory: ./  # Ensure the setup and migration are executed in the root

    # Step 7: Set up Node.js to use Yarn
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Updated to Node.js version 20

    # Step 8: Install JavaScript dependencies using Yarn
    - name: Install dependencies
      run: yarn install

    # Step 9: Build the Rust project
    - name: Build Rust project
      run: cargo build --verbose
      working-directory: ./src-tauri  # Specify the directory where Cargo.toml is located

    # Step 10: Set DATABASE_URL environment variable before running tests
    - name: Set DATABASE_URL environment variable
      run: echo "DATABASE_URL=$(pwd)/app.db" >> $GITHUB_ENV
      working-directory: ./  # Set DATABASE_URL to the absolute path of app.db in root directory

    # Step 11: Run Rust tests from a specific file (test_file.rs)
    - name: Run specific Rust test file
      run: cargo test --test test_file --verbose
      working-directory: ./src-tauri  # Ensure tests run in the correct directory
